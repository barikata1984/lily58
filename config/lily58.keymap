/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        COMBO_BT_CLR {
            bindings = <&bt BT_CLR>;
            key-positions = <53 28 31 54>;
            layers = <1>;
        };

        BT_SEL_0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <53 54 13>;
            timeout-ms = <500>;
            layers = <1>;
        };

        BT_SEL_1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <53 14 54>;
            timeout-ms = <500>;
            layers = <1>;
        };

        BT_SEL_2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <53 15 54>;
            timeout-ms = <500>;
            layers = <1>;
        };

        BT_SEL_3 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <53 16 54>;
            timeout-ms = <500>;
            layers = <1>;
        };

        BT_SEL_4 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <53 17 54>;
            timeout-ms = <500>;
            layers = <1>;
        };

        MUTE {
            bindings = <&kp C_MUTE>;
            key-positions = <45 46>;
            timeout-ms = <500>;
        };

        COMBO_ESC {
            bindings = <&kp ESCAPE>;
            key-positions = <31 32>;
            timeout-ms = <500>;
            layers = <0>;
        };

        lctrl {
            bindings = <&kp LS(LEFT_CONTROL)>;
            key-positions = <26 25>;
        };

        lshft {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <38 37>;
        };

        rctrl {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <33 34>;
        };

        rshft {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <47 48>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
        };
    };

    behaviors {
        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        double_zero: double_zero {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_0 &kp NUMBER_0>;
            label = "DOUBLE_ZERO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans                                  &trans  &trans     &trans     &trans   &trans     &trans
&trans  &kp Q   &kp W   &kp E   &kp R     &kp T                                   &kp Y   &kp U      &kp I      &kp O    &kp P      &trans
&trans  &kp A   &kp S   &kp D   &kp F     &kp G                                   &kp H   &kp J      &kp K      &kp L    &kp SEMI   &trans
&trans  &kp Z   &kp X   &kp C   &kp V     &kp B         &trans       &trans       &kp N   &kp M      &kp COMMA  &kp DOT  &kp SLASH  &trans
                        &trans  &kp LGUI  &kp LEFT_ALT  &kp SPACE    &lt 2 ENTER  &mo 1   &bspc_del  &trans
            >;
        };

        numeric {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Utility";
            bindings = <
&kp F1  &kp F2            &kp F3     &kp F4  &kp F5    &kp F6                                    &kp F7             &kp F8     &kp F9         &kp F10            &kp F11            &kp F12
&trans  &kp N1            &kp N2     &kp N3  &kp N4    &kp N5                                    &kp N6             &kp N7     &kp N8         &kp N9             &kp N0             &trans
&trans  &kp LEFT_CONTROL  &kp GRAVE  &trans  &trans    &kp LEFT_BRACKET                          &kp RIGHT_BRACKET  &trans     &kp BACKSLASH  &kp DOUBLE_QUOTES  &kp RIGHT_CONTROL  &trans
&trans  &kp LEFT_SHIFT    &trans     &trans  &trans    &trans            &trans       &trans     &kp MINUS          &kp PLUS   &kp COMMA      &kp PERIOD         &kp RIGHT_SHIFT    &trans
                                     &trans  &kp LGUI  &kp LEFT_ALT      &kp SPACE    &kp ENTER  &trans             &bspc_del  &trans
            >;
        };

        functional {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6                       &kp F7         &kp F8        &kp F9        &kp F10           &kp F11    &kp F12
&trans  &trans  &trans  &trans  &trans  &trans                       &kp C_AC_BACK  &kp PG_DN     &kp PG_UP     &kp C_AC_FORWARD  &kp PSCRN  &trans
&trans  &trans  &trans  &trans  &trans  &trans                       &kp LEFT       &kp DOWN      &kp UP        &kp RIGHT         &kp HOME   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans       &trans  &mkp LCLK      &kp C_VOL_DN  &kp C_VOL_UP  &mkp RCLK         &kp END    &trans
                        &trans  &trans  &trans  &kp SPACE    &trans  &kp C_PP       &mkp MCLK     &trans
            >;

            label = "CAD";
        };
    };
};
